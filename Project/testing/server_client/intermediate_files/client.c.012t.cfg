
;; Function login (login, funcdef_no=6, decl_uid=3786, cgraph_uid=7, symbol_order=7)

Merging blocks 13 and 15
Merging blocks 14 and 17
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
;;
;; Loop 1
;;  header 3, latch 13
;;  depth 1, outer 0
;;  nodes: 3 13 10 11 12 9 7 8 5
;; 2 succs { 3 }
;; 3 succs { 4 5 }
;; 4 succs { 14 }
;; 5 succs { 6 7 }
;; 6 succs { 14 }
;; 7 succs { 8 9 }
;; 8 succs { 9 }
;; 9 succs { 10 11 }
;; 10 succs { 13 }
;; 11 succs { 12 13 }
;; 12 succs { 13 }
;; 13 succs { 3 15 }
;; 14 succs { 16 }
;; 15 succs { }
;; 16 succs { 1 }
login ()
{
  int result;
  char password[30];
  int user_id;
  int disconnect;
  int choice;
  int D.3877;

  <bb 2> :
  choice = 1;

  <bb 3> :
  printf ("Enter the user id: ");
  scanf ("%d", &user_id);
  printf ("Enter your password: ");
  scanf ("%s", &password);
  sd.0_1 = sd;
  write (sd.0_1, &user_id, 4);
  sd.1_2 = sd;
  write (sd.1_2, &password, 30);
  sd.2_3 = sd;
  read (sd.2_3, &result, 4);
  result.3_4 = result;
  if (result.3_4 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  __builtin_puts (&"Successfully logged in"[0]);
  D.3877 = 0;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 14>; [INV]

  <bb 5> :
  result.4_5 = result;
  if (result.4_5 == 2)
    goto <bb 6>; [INV]
  else
    goto <bb 7>; [INV]

  <bb 6> :
  __builtin_puts (&"Successfully logged in"[0]);
  D.3877 = 1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 14>; [INV]

  <bb 7> :
  result.5_6 = result;
  if (result.5_6 == 3)
    goto <bb 8>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 8> :
  __builtin_puts (&"The account is already logged in from another terminal"[0]);

  <bb 9> :
  result.6_7 = result;
  if (result.6_7 == -1)
    goto <bb 10>; [INV]
  else
    goto <bb 11>; [INV]

  <bb 10> :
  __builtin_puts (&"Wrong user id"[0]);
  goto <bb 13>; [INV]

  <bb 11> :
  result.7_8 = result;
  if (result.7_8 == 0)
    goto <bb 12>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 12> :
  __builtin_puts (&"Wrong password"[0]);

  <bb 13> :
  __builtin_puts (&"Try again?(1: yes, 0: no)"[0]);
  scanf ("%d", &choice);
  user_id = {CLOBBER};
  password = {CLOBBER};
  result = {CLOBBER};
  choice.8_9 = choice;
  if (choice.8_9 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 14> :
  user_id = {CLOBBER};
  password = {CLOBBER};
  result = {CLOBBER};
  choice = {CLOBBER};
  disconnect = {CLOBBER};
  goto <bb 16>; [INV]

  <bb 15> :
  disconnect = -1;
  sd.9_10 = sd;
  write (sd.9_10, &disconnect, 4);
  sd.10_11 = sd;
  close (sd.10_11);
  exit (0);

  <bb 16> :
<L16>:
  return D.3877;

}



;; Function balance_enquiry (balance_enquiry, funcdef_no=7, decl_uid=3795, cgraph_uid=8, symbol_order=8)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
balance_enquiry ()
{
  float balance;

  <bb 2> :
  sd.11_1 = sd;
  read (sd.11_1, &balance, 4);
  balance.12_2 = balance;
  _3 = (double) balance.12_2;
  printf ("Current balance: %f\n", _3);
  balance = {CLOBBER};
  return;

}



;; Function deposit (deposit, funcdef_no=8, decl_uid=3798, cgraph_uid=9, symbol_order=9)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
deposit ()
{
  int ret;
  float amount;

  <bb 2> :
  printf ("Enter the amount to be deposited: ");
  scanf ("%f", &amount);
  sd.13_1 = sd;
  write (sd.13_1, &amount, 4);
  sd.14_2 = sd;
  read (sd.14_2, &ret, 4);
  amount = {CLOBBER};
  ret = {CLOBBER};
  return;

}



;; Function withdraw (withdraw, funcdef_no=9, decl_uid=3802, cgraph_uid=10, symbol_order=10)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 3 4 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 1 }
withdraw ()
{
  int ret;
  float amount;

  <bb 2> :
  printf ("Enter the amount to be withdrawn: ");
  scanf ("%f", &amount);
  amount.15_1 = amount;
  _2 = -amount.15_1;
  amount = _2;
  sd.16_3 = sd;
  write (sd.16_3, &amount, 4);
  sd.17_4 = sd;
  read (sd.17_4, &ret, 4);
  ret.18_5 = ret;
  if (ret.18_5 == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  __builtin_puts (&"Transaction successful"[0]);
  goto <bb 5>; [INV]

  <bb 4> :
  printf ("Not enough funds");

  <bb 5> :
  amount = {CLOBBER};
  ret = {CLOBBER};
  return;

}



;; Function change_password (change_password, funcdef_no=10, decl_uid=3806, cgraph_uid=11, symbol_order=11)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
change_password ()
{
  char password[30];

  <bb 2> :
  printf ("Enter the new password: ");
  scanf ("%s", &password);
  sd.19_1 = sd;
  write (sd.19_1, &password, 30);
  __builtin_puts (&"password changed"[0]);
  password = {CLOBBER};
  return;

}



;; Function view_details (view_details, funcdef_no=11, decl_uid=3809, cgraph_uid=12, symbol_order=12)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
view_details ()
{
  char password[30];
  char name[30];
  int number_of_users;
  int account_id;
  int user_id;

  <bb 2> :
  sd.20_1 = sd;
  read (sd.20_1, &user_id, 4);
  sd.21_2 = sd;
  read (sd.21_2, &name, 30);
  sd.22_3 = sd;
  read (sd.22_3, &account_id, 4);
  sd.23_4 = sd;
  read (sd.23_4, &number_of_users, 4);
  sd.24_5 = sd;
  read (sd.24_5, &password, 30);
  __builtin_puts (&"Details"[0]);
  user_id.25_6 = user_id;
  printf ("User Id: %d\n", user_id.25_6);
  printf ("Name: %s\n", &name);
  account_id.26_7 = account_id;
  printf ("Account id: %d\n", account_id.26_7);
  number_of_users.27_8 = number_of_users;
  printf ("Number of users attached to account: %d\n", number_of_users.27_8);
  printf ("Password: %s\n", &password);
  user_id = {CLOBBER};
  account_id = {CLOBBER};
  number_of_users = {CLOBBER};
  name = {CLOBBER};
  password = {CLOBBER};
  return;

}



;; Function menu_loop (menu_loop, funcdef_no=12, decl_uid=3816, cgraph_uid=13, symbol_order=13)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9
;;
;; Loop 1
;;  header 2, latch 8
;;  depth 1, outer 0
;;  nodes: 2 8 3 4 5 6 7
;; 2 succs { 8 3 4 5 6 7 }
;; 3 succs { 8 }
;; 4 succs { 8 }
;; 5 succs { 8 }
;; 6 succs { 8 }
;; 7 succs { 8 }
;; 8 succs { 2 9 }
;; 9 succs { 1 }
menu_loop ()
{
  int choice;

  <bb 2> :
  __builtin_puts (&"\nMenu"[0]);
  __builtin_puts (&"1:Balance enquiry"[0]);
  __builtin_puts (&"2:Deposit"[0]);
  __builtin_puts (&"3:Withdraw"[0]);
  __builtin_puts (&"4:Change Password"[0]);
  __builtin_puts (&"5:View details"[0]);
  __builtin_puts (&"6:Exit"[0]);
  scanf ("%d", &choice);
  sd.28_1 = sd;
  write (sd.28_1, &choice, 4);
  choice.29_2 = choice;
  switch (choice.29_2) <default: <L6> [INV], case 1: <L1> [INV], case 2: <L2> [INV], case 3: <L3> [INV], case 4: <L4> [INV], case 5: <L5> [INV]>

  <bb 3> :
<L1>:
  balance_enquiry ();
  goto <bb 8>; [INV]

  <bb 4> :
<L2>:
  deposit ();
  goto <bb 8>; [INV]

  <bb 5> :
<L3>:
  withdraw ();
  goto <bb 8>; [INV]

  <bb 6> :
<L4>:
  change_password ();
  goto <bb 8>; [INV]

  <bb 7> :
<L5>:
  view_details ();

  <bb 8> :
<L6>:
  choice.30_3 = choice;
  if (choice.30_3 != 6)
    goto <bb 2>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  choice = {CLOBBER};
  return;

}



;; Function add_user (add_user, funcdef_no=13, decl_uid=3827, cgraph_uid=14, symbol_order=14)

Merging blocks 9 and 11
Merging blocks 14 and 15
Merging blocks 16 and 17
;; 3 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15
;;
;; Loop 2
;;  header 8, latch 9
;;  depth 1, outer 0
;;  nodes: 8 9
;;
;; Loop 1
;;  header 3, latch 13
;;  depth 1, outer 0
;;  nodes: 3 13 6
;; 2 succs { 3 }
;; 3 succs { 4 6 }
;; 4 succs { 5 }
;; 5 succs { 14 }
;; 6 succs { 7 13 }
;; 7 succs { 8 }
;; 8 succs { 9 10 }
;; 9 succs { 8 }
;; 10 succs { 11 }
;; 11 succs { 12 }
;; 12 succs { 14 }
;; 13 succs { 3 }
;; 14 succs { 15 }
;; 15 succs { 1 }
add_user ()
{
  int result;
  struct account a;
  int choice;
  int account_number;
  struct user u;
  int D.3901;

  <bb 2> :
  printf ("Enter the name: ");
  scanf ("%s", &u.name);
  printf ("Enter the password: ");
  scanf ("%s", &u.password);
  u.type = 67;
  u.online = 0;
  sd.31_1 = sd;
  write (sd.31_1, &u, 76);

  <bb 3> :
  __builtin_puts (&"Account Choice\n1:Add new account\n2:Share existing account"[0]);
  scanf ("%d", &choice);
  choice.32_2 = choice;
  if (choice.32_2 == 1)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
  sd.33_3 = sd;
  write (sd.33_3, &choice, 4);
  printf ("Enter initial deposit amount: ");
  scanf ("%f", &a.balance);
  a.number_of_users = 1;
  sd.34_4 = sd;
  write (sd.34_4, &a, 12);
  sd.35_5 = sd;
  read (sd.35_5, &a.account_id, 4);
  _6 = a.account_id;
  account_number = _6;

  <bb 5> :
  a = {CLOBBER};
  goto <bb 14>; [INV]

  <bb 6> :
  choice.36_7 = choice;
  if (choice.36_7 == 2)
    goto <bb 7>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 7> :
  sd.37_8 = sd;
  write (sd.37_8, &choice, 4);

  <bb 8> :
  printf ("Enter the account number: ");
  scanf ("%d", &account_number);
  sd.38_9 = sd;
  write (sd.38_9, &account_number, 4);
  sd.39_10 = sd;
  read (sd.39_10, &result, 4);
  result.40_11 = result;
  if (result.40_11 == -1)
    goto <bb 9>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 9> :
  __builtin_puts (&"The account number does not exist. Try again."[0]);
  // predicted unlikely by continue predictor.
  goto <bb 8>; [INV]

  <bb 10> :

  <bb 11> :

  <bb 12> :
  result = {CLOBBER};
  goto <bb 14>; [INV]

  <bb 13> :
  __builtin_puts (&"Please enter a valid choice. "[0]);
  // predicted unlikely by continue predictor.
  goto <bb 3>; [INV]

  <bb 14> :
  sd.41_12 = sd;
  read (sd.41_12, &u.user_id, 4);
  account_number.42_13 = account_number;
  _14 = u.user_id;
  printf ("User successfully added.\nUser ID: %d\nAccount ID: %d\n", _14, account_number.42_13);
  D.3901 = 0;
  u = {CLOBBER};
  account_number = {CLOBBER};
  choice = {CLOBBER};

  <bb 15> :
<L15>:
  return D.3901;

}



;; Function delete_user (delete_user, funcdef_no=14, decl_uid=3840, cgraph_uid=15, symbol_order=15)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;; 2 succs { 3 4 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 1 }
delete_user ()
{
  int result;
  int user_id;

  <bb 2> :
  printf ("Enter the user id to delete: ");
  scanf ("%d", &user_id);
  sd.43_1 = sd;
  write (sd.43_1, &user_id, 4);
  sd.44_2 = sd;
  read (sd.44_2, &result, 4);
  result.45_3 = result;
  if (result.45_3 == -1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  __builtin_puts (&"User ID doesn\'t exist"[0]);
  goto <bb 5>; [INV]

  <bb 4> :
  __builtin_puts (&"User successfully deleted"[0]);

  <bb 5> :
  user_id = {CLOBBER};
  result = {CLOBBER};
  return;

}



;; Function add_admin (add_admin, funcdef_no=15, decl_uid=3844, cgraph_uid=16, symbol_order=16)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
add_admin ()
{
  int id;
  struct user u;

  <bb 2> :
  printf ("Enter the name: ");
  scanf ("%s", &u.name);
  printf ("Enter the password: ");
  scanf ("%s", &u.password);
  u.type = 65;
  u.online = 0;
  sd.46_1 = sd;
  write (sd.46_1, &u, 76);
  sd.47_2 = sd;
  read (sd.47_2, &id, 4);
  id.48_3 = id;
  printf ("User Id: %d\n", id.48_3);
  u = {CLOBBER};
  id = {CLOBBER};
  return;

}



;; Function search_user (search_user, funcdef_no=16, decl_uid=3848, cgraph_uid=17, symbol_order=17)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16
;;
;; Loop 1
;;  header 4, latch 13
;;  depth 1, outer 0
;;  nodes: 4 13
;; 2 succs { 3 15 }
;; 3 succs { 4 }
;; 4 succs { 5 13 }
;; 5 succs { 6 10 }
;; 6 succs { 7 8 }
;; 7 succs { 9 }
;; 8 succs { 9 }
;; 9 succs { 12 }
;; 10 succs { 11 12 }
;; 11 succs { 12 }
;; 12 succs { 14 }
;; 13 succs { 4 }
;; 14 succs { 16 }
;; 15 succs { 16 }
;; 16 succs { 1 }
search_user ()
{
  float amount;
  float amount;
  struct account a;
  struct user u;
  int result;
  int user_id;

  <bb 2> :
  printf ("Enter the user ID: ");
  scanf ("%d", &user_id);
  sd.49_1 = sd;
  write (sd.49_1, &user_id, 4);
  sd.50_2 = sd;
  read (sd.50_2, &result, 4);
  result.51_3 = result;
  if (result.51_3 != -1)
    goto <bb 3>; [INV]
  else
    goto <bb 15>; [INV]

  <bb 3> :
  sd.52_4 = sd;
  read (sd.52_4, &u, 76);
  sd.53_5 = sd;
  read (sd.53_5, &a, 12);
  __builtin_puts (&"Details"[0]);
  user_id.54_6 = user_id;
  printf ("User Id: %d\n", user_id.54_6);
  printf ("Name: %s\n", &u.name);
  _7 = u.account_id;
  printf ("Account id: %d\n", _7);
  printf ("Password: %s\n", &u.password);
  _8 = a.balance;
  _9 = (double) _8;
  printf ("Balance: %f\n", _9);
  _10 = a.number_of_users;
  printf ("Number of users attached to account: %d\n", _10);

  <bb 4> :
  __builtin_puts (&"Change balance?\n1:Deduct Balance\n2:Add Balance\n3:No change"[0]);
  scanf ("%d", &result);
  result.55_11 = result;
  _12 = result.55_11 > 0;
  result.56_13 = result;
  _14 = result.56_13 <= 3;
  _15 = _12 & _14;
  if (_15 != 0)
    goto <bb 5>; [INV]
  else
    goto <bb 13>; [INV]

  <bb 5> :
  sd.57_16 = sd;
  write (sd.57_16, &result, 4);
  result.58_17 = result;
  if (result.58_17 == 1)
    goto <bb 6>; [INV]
  else
    goto <bb 10>; [INV]

  <bb 6> :
  printf ("Enter the amount to deduct: ");
  scanf ("%f", &amount);
  amount.59_18 = amount;
  _19 = -amount.59_18;
  amount = _19;
  sd.60_20 = sd;
  write (sd.60_20, &amount, 4);
  sd.61_21 = sd;
  read (sd.61_21, &result, 4);
  result.62_22 = result;
  if (result.62_22 == 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  __builtin_puts (&"Operation successful"[0]);
  goto <bb 9>; [INV]

  <bb 8> :
  __builtin_puts (&"Not enough balance"[0]);

  <bb 9> :
  amount = {CLOBBER};
  goto <bb 12>; [INV]

  <bb 10> :
  result.63_23 = result;
  if (result.63_23 == 2)
    goto <bb 11>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 11> :
  printf ("Enter the amount to add: ");
  scanf ("%f", &amount);
  sd.64_24 = sd;
  write (sd.64_24, &amount, 4);
  sd.65_25 = sd;
  read (sd.65_25, &result, 4);
  __builtin_puts (&"Operation successful"[0]);
  amount = {CLOBBER};

  <bb 12> :
  goto <bb 14>; [INV]

  <bb 13> :
  goto <bb 4>; [INV]

  <bb 14> :
  u = {CLOBBER};
  a = {CLOBBER};
  goto <bb 16>; [INV]

  <bb 15> :
  __builtin_puts (&"User ID doesn\'t exist"[0]);

  <bb 16> :
  user_id = {CLOBBER};
  result = {CLOBBER};
  return;

}



;; Function admin_menu_loop (admin_menu_loop, funcdef_no=17, decl_uid=3858, cgraph_uid=18, symbol_order=18)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9
;;
;; Loop 1
;;  header 2, latch 8
;;  depth 1, outer 0
;;  nodes: 2 8 3 4 5 6 7
;; 2 succs { 8 3 4 5 6 7 }
;; 3 succs { 8 }
;; 4 succs { 8 }
;; 5 succs { 8 }
;; 6 succs { 8 }
;; 7 succs { 8 }
;; 8 succs { 2 9 }
;; 9 succs { 1 }
admin_menu_loop ()
{
  int choice;

  <bb 2> :
  __builtin_puts (&"\nMenu"[0]);
  __builtin_puts (&"1:Add User"[0]);
  __builtin_puts (&"2:Delete User"[0]);
  __builtin_puts (&"3:Search for User"[0]);
  __builtin_puts (&"4:Change Password"[0]);
  __builtin_puts (&"5:Add Admin"[0]);
  __builtin_puts (&"6:Exit"[0]);
  scanf ("%d", &choice);
  sd.66_1 = sd;
  write (sd.66_1, &choice, 4);
  choice.67_2 = choice;
  switch (choice.67_2) <default: <L6> [INV], case 1: <L1> [INV], case 2: <L2> [INV], case 3: <L3> [INV], case 4: <L4> [INV], case 5: <L5> [INV]>

  <bb 3> :
<L1>:
  add_user ();
  goto <bb 8>; [INV]

  <bb 4> :
<L2>:
  delete_user ();
  goto <bb 8>; [INV]

  <bb 5> :
<L3>:
  search_user ();
  goto <bb 8>; [INV]

  <bb 6> :
<L4>:
  change_password ();
  goto <bb 8>; [INV]

  <bb 7> :
<L5>:
  add_admin ();

  <bb 8> :
<L6>:
  choice.68_3 = choice;
  if (choice.68_3 != 6)
    goto <bb 2>; [INV]
  else
    goto <bb 9>; [INV]

  <bb 9> :
  choice = {CLOBBER};
  return;

}



;; Function main (main, funcdef_no=18, decl_uid=3869, cgraph_uid=19, symbol_order=19)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6
;; 2 succs { 3 4 }
;; 3 succs { 5 }
;; 4 succs { 5 }
;; 5 succs { 6 }
;; 6 succs { 1 }
main ()
{
  int login_type;
  int port_number;
  struct sockaddr_in server;
  int D.3926;

  <bb 2> :
  _1 = socket (2, 1, 0);
  sd = _1;
  server.sin_family = 2;
  server.sin_addr.s_addr = 0;
  port_number = 8000;
  _2 = (short unsigned int) port_number;
  _3 = (int) _2;
  _4 = htons (_3);
  server.sin_port = _4;
  sd.69_5 = sd;
  connect (sd.69_5, &server, 16);
  login_type = login ();
  if (login_type == 0)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  menu_loop ();
  goto <bb 5>; [INV]

  <bb 4> :
  admin_menu_loop ();

  <bb 5> :
  server = {CLOBBER};
  D.3926 = 0;

  <bb 6> :
<L3>:
  return D.3926;

}



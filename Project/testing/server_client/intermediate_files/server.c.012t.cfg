
;; Function sigint_handler (sigint_handler, funcdef_no=6, decl_uid=4701, cgraph_uid=7, symbol_order=7)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { }
sigint_handler (int signum)
{
  <bb 2> :
  close_database ();
  exit (0);

}



;; Function login (login, funcdef_no=7, decl_uid=4705, cgraph_uid=8, symbol_order=8)

Merging blocks 8 and 10
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10
;;
;; Loop 1
;;  header 2, latch 8
;;  depth 1, outer 0
;;  nodes: 2 8 6 4
;; 2 succs { 3 4 }
;; 3 succs { 9 }
;; 4 succs { 5 6 }
;; 5 succs { 9 }
;; 6 succs { 7 8 }
;; 7 succs { 9 }
;; 8 succs { 2 }
;; 9 succs { 10 }
;; 10 succs { 1 }
login (int sd, int * type)
{
  int result;
  char password[30];
  int user_id;
  int D.4800;

  <bb 2> :
  read (sd, &user_id, 4);
  user_id.0_1 = user_id;
  if (user_id.0_1 == -1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  D.4800 = -1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 9>; [INV]

  <bb 4> :
  read (sd, &password, 30);
  user_id.1_2 = user_id;
  _3 = check_password (user_id.1_2, &password);
  result = _3;
  write (sd, &result, 4);
  result.2_4 = result;
  *type = result.2_4;
  result.3_5 = result;
  if (result.3_5 == 3)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  D.4800 = -1;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 9>; [INV]

  <bb 6> :
  result.4_6 = result;
  if (result.4_6 != 0)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  D.4800 = user_id;
  // predicted unlikely by early return (on trees) predictor.
  goto <bb 9>; [INV]

  <bb 8> :
  user_id = {CLOBBER};
  password = {CLOBBER};
  result = {CLOBBER};
  goto <bb 2>; [INV]

  <bb 9> :
  user_id = {CLOBBER};
  password = {CLOBBER};
  result = {CLOBBER};

  <bb 10> :
<L9>:
  return D.4800;

}



;; Function customer_interface (customer_interface, funcdef_no=8, decl_uid=4713, cgraph_uid=9, symbol_order=9)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14
;;
;; Loop 1
;;  header 3, latch 13
;;  depth 1, outer 0
;;  nodes: 3 13 5 7 9 11 12 10 8 6 4
;; 2 succs { 3 }
;; 3 succs { 13 4 6 8 10 12 }
;; 4 succs { 5 }
;; 5 succs { 13 }
;; 6 succs { 7 }
;; 7 succs { 13 }
;; 8 succs { 9 }
;; 9 succs { 13 }
;; 10 succs { 11 }
;; 11 succs { 13 }
;; 12 succs { 13 }
;; 13 succs { 3 14 }
;; 14 succs { 1 }
customer_interface (int sd, int user_id)
{
  int ndx;
  struct account a;
  struct user u;
  char password[30];
  float amount;
  int ret;
  float balance;
  int account_id;
  int choice;

  <bb 2> :
  account_id = get_account_id (user_id);

  <bb 3> :
  read (sd, &choice, 4);
  choice.5_1 = choice;
  switch (choice.5_1) <default: <L11> [INV], case 1: <L1> [INV], case 2 ... 3: <L3> [INV], case 4: <L6> [INV], case 5: <L8> [INV], case 6: <L10> [INV]>

  <bb 4> :
<L1>:
  _2 = get_balance (account_id);
  _3 = (float) _2;
  balance = _3;
  write (sd, &balance, 4);

  <bb 5> :
  balance = {CLOBBER};
  goto <bb 13>; [INV]

  <bb 6> :
<L3>:
  read (sd, &amount, 4);
  amount.6_4 = amount;
  _5 = transaction (account_id, amount.6_4);
  ret = _5;
  write (sd, &ret, 4);

  <bb 7> :
  ret = {CLOBBER};
  amount = {CLOBBER};
  goto <bb 13>; [INV]

  <bb 8> :
<L6>:
  read (sd, &password, 30);
  change_password (user_id, &password);

  <bb 9> :
  password = {CLOBBER};
  goto <bb 13>; [INV]

  <bb 10> :
<L8>:
  search (user_id, &u, &a);
  _6 = a.account_id;
  ndx = get_account_index (_6);
  lock_account (ndx, -1);
  write (sd, &u.user_id, 4);
  write (sd, &u.name, 30);
  write (sd, &u.account_id, 4);
  write (sd, &a.number_of_users, 4);
  write (sd, &u.password, 30);

  <bb 11> :
  u = {CLOBBER};
  a = {CLOBBER};
  goto <bb 13>; [INV]

  <bb 12> :
<L10>:
  logout (user_id);

  <bb 13> :
<L11>:
  choice.7_7 = choice;
  if (choice.7_7 != 6)
    goto <bb 3>; [INV]
  else
    goto <bb 14>; [INV]

  <bb 14> :
  choice = {CLOBBER};
  return;

}



;; Function create_user (create_user, funcdef_no=9, decl_uid=4734, cgraph_uid=10, symbol_order=10)

Merging blocks 9 and 10
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10
;;
;; Loop 1
;;  header 4, latch 8
;;  depth 1, outer 0
;;  nodes: 4 8 5
;; 2 succs { 3 4 }
;; 3 succs { 9 }
;; 4 succs { 5 6 }
;; 5 succs { 8 }
;; 6 succs { 7 }
;; 7 succs { 9 }
;; 8 succs { 4 }
;; 9 succs { 10 }
;; 10 succs { 1 }
create_user (int sd)
{
  int a;
  int a;
  struct account a;
  int choice;
  struct user u;
  int D.4819;

  <bb 2> :
  __builtin_puts (&"entered function"[0]);
  read (sd, &u, 76);
  read (sd, &choice, 4);
  choice.8_1 = choice;
  printf ("%d\n", choice.8_1);
  choice.9_2 = choice;
  if (choice.9_2 == 1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  read (sd, &a, 12);
  __builtin_puts (&"c"[0]);
  insert_account (&a);
  _3 = a.account_id;
  u.account_id = _3;
  __builtin_puts (&"b"[0]);
  write (sd, &u.account_id, 4);
  a = {CLOBBER};
  goto <bb 9>; [INV]

  <bb 4> :
  read (sd, &u.account_id, 4);
  _4 = u.account_id;
  _5 = attach_new_user (_4);
  if (_5 == -1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  a = -1;
  write (sd, &a, 4);
  a = {CLOBBER};
  goto <bb 8>; [INV]

  <bb 6> :
  a = 1;
  write (sd, &a, 4);

  <bb 7> :
  a = {CLOBBER};
  goto <bb 9>; [INV]

  <bb 8> :
  goto <bb 4>; [INV]

  <bb 9> :
  insert_user (&u);
  write (sd, &u.user_id, 4);
  D.4819 = 0;
  u = {CLOBBER};
  choice = {CLOBBER};

  <bb 10> :
<L10>:
  return D.4819;

}



;; Function add_admin (add_admin, funcdef_no=10, decl_uid=4744, cgraph_uid=11, symbol_order=11)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
add_admin (int sd)
{
  struct user u;

  <bb 2> :
  read (sd, &u, 76);
  insert_user (&u);
  write (sd, &u.user_id, 4);
  u = {CLOBBER};
  return;

}



;; Function delete_user_server (delete_user_server, funcdef_no=11, decl_uid=4748, cgraph_uid=12, symbol_order=12)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
delete_user_server (int sd)
{
  int result;
  int user_id;

  <bb 2> :
  read (sd, &user_id, 4);
  user_id.10_1 = user_id;
  _2 = delete_user (user_id.10_1);
  result = _2;
  write (sd, &result, 4);
  user_id = {CLOBBER};
  result = {CLOBBER};
  return;

}



;; Function search_user (search_user, funcdef_no=12, decl_uid=4753, cgraph_uid=13, symbol_order=13)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6
;; 2 succs { 3 6 }
;; 3 succs { 6 4 }
;; 4 succs { 5 }
;; 5 succs { 6 }
;; 6 succs { 1 }
search_user (int sd)
{
  unsigned int D.4828;
  unsigned int D.4827;
  float amount;
  int ndx;
  struct account a;
  struct user u;
  int result;
  int user_id;

  <bb 2> :
  read (sd, &user_id, 4);
  user_id.11_1 = user_id;
  _2 = search (user_id.11_1, &u, &a);
  result = _2;
  write (sd, &result, 4);
  result.12_3 = result;
  if (result.12_3 != -1)
    goto <bb 3>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 3> :
  write (sd, &u, 76);
  write (sd, &a, 12);
  read (sd, &result, 4);
  result.13_4 = result;
  D.4827 = (unsigned int) result.13_4;
  D.4828 = D.4827 + 4294967295;
  if (D.4828 <= 1)
    goto <bb 4>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 4> :
<L1>:
  read (sd, &amount, 4);
  amount.14_5 = amount;
  _6 = a.account_id;
  _7 = transaction (_6, amount.14_5);
  result = _7;
  write (sd, &result, 4);

  <bb 5> :
  amount = {CLOBBER};

  <bb 6> :
<L4>:
  _8 = a.account_id;
  ndx = get_account_index (_8);
  lock_account (ndx, -1);
  user_id = {CLOBBER};
  result = {CLOBBER};
  u = {CLOBBER};
  a = {CLOBBER};
  return;

}



;; Function admin_interface (admin_interface, funcdef_no=13, decl_uid=4766, cgraph_uid=14, symbol_order=14)

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8 9 10 11 12
;;
;; Loop 1
;;  header 3, latch 11
;;  depth 1, outer 0
;;  nodes: 3 11 4 5 6 8 9 10 7
;; 2 succs { 3 }
;; 3 succs { 11 4 5 6 7 9 10 }
;; 4 succs { 11 }
;; 5 succs { 11 }
;; 6 succs { 11 }
;; 7 succs { 8 }
;; 8 succs { 11 }
;; 9 succs { 11 }
;; 10 succs { 11 }
;; 11 succs { 3 12 }
;; 12 succs { 1 }
admin_interface (int sd, int user_id)
{
  char password[30];
  int account_id;
  int choice;

  <bb 2> :
  account_id = get_account_id (user_id);

  <bb 3> :
  __builtin_puts (&"waiting for choice"[0]);
  read (sd, &choice, 4);
  choice.15_1 = choice;
  printf ("choice %d\n", choice.15_1);
  choice.16_2 = choice;
  switch (choice.16_2) <default: <L8> [INV], case 1: <L1> [INV], case 2: <L2> [INV], case 3: <L3> [INV], case 4: <L4> [INV], case 5: <L6> [INV], case 6: <L7> [INV]>

  <bb 4> :
<L1>:
  create_user (sd);
  goto <bb 11>; [INV]

  <bb 5> :
<L2>:
  delete_user_server (sd);
  goto <bb 11>; [INV]

  <bb 6> :
<L3>:
  search_user (sd);
  goto <bb 11>; [INV]

  <bb 7> :
<L4>:
  read (sd, &password, 30);
  change_password (user_id, &password);

  <bb 8> :
  password = {CLOBBER};
  goto <bb 11>; [INV]

  <bb 9> :
<L6>:
  add_admin (sd);
  goto <bb 11>; [INV]

  <bb 10> :
<L7>:
  logout (user_id);

  <bb 11> :
<L8>:
  choice.17_3 = choice;
  if (choice.17_3 != 6)
    goto <bb 3>; [INV]
  else
    goto <bb 12>; [INV]

  <bb 12> :
  __builtin_puts (&"a"[0]);
  choice = {CLOBBER};
  return;

}



;; Function thread_function (thread_function, funcdef_no=14, decl_uid=4781, cgraph_uid=15, symbol_order=15)

;; 1 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5 6 7 8
;; 2 succs { 3 4 }
;; 3 succs { }
;; 4 succs { 5 6 }
;; 5 succs { 8 }
;; 6 succs { 7 8 }
;; 7 succs { 8 }
;; 8 succs { 1 }
thread_function (int sd)
{
  int user_id;
  int type;

  <bb 2> :
  user_id = login (sd, &type);
  if (user_id == -1)
    goto <bb 3>; [INV]
  else
    goto <bb 4>; [INV]

  <bb 3> :
  exit (0);

  <bb 4> :
  type.18_1 = type;
  if (type.18_1 == 1)
    goto <bb 5>; [INV]
  else
    goto <bb 6>; [INV]

  <bb 5> :
  customer_interface (sd, user_id);
  goto <bb 8>; [INV]

  <bb 6> :
  type.19_2 = type;
  if (type.19_2 == 2)
    goto <bb 7>; [INV]
  else
    goto <bb 8>; [INV]

  <bb 7> :
  admin_interface (sd, user_id);

  <bb 8> :
  type = {CLOBBER};
  return;

}



;; Function main (main, funcdef_no=15, decl_uid=4785, cgraph_uid=16, symbol_order=16)

Removing basic block 6
Removing basic block 7
;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2 3 4 5
;;
;; Loop 1
;;  header 3, latch 5
;;  depth 1, outer 0
;;  nodes: 3 5
;; 2 succs { 3 }
;; 3 succs { 4 5 }
;; 4 succs { }
;; 5 succs { 3 }
main ()
{
  struct args a;
  char buffer[80];
  int nsd;
  int sizeof_client;
  int port_number;
  int sd;
  int err;
  struct sockaddr_in client;
  struct sockaddr_in server;
  int D.4840;

  <bb 2> :
  sd = socket (2, 1, 0);
  port_number = 8000;
  server.sin_family = 2;
  server.sin_addr.s_addr = 0;
  _1 = (short unsigned int) port_number;
  _2 = (int) _1;
  _3 = htons (_2);
  server.sin_port = _3;
  load_database ();
  signal (2, sigint_handler);
  bind (sd, &server, 16);
  listen (sd, 1);
  sizeof_client = 16;

  <bb 3> :
  nsd = accept (sd, &client, &sizeof_client);
  a.nsd = nsd;
  _4 = fork ();
  if (_4 == 0)
    goto <bb 4>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 4> :
  thread_function (nsd);
  exit (0);

  <bb 5> :
  a = {CLOBBER};
  goto <bb 3>; [INV]

}


